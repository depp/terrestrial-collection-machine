load("//tools:copts.bzl", "COPTS", "CXXOPTS")

cc_library(
    name = "opengl_framework",
    linkopts = ["-framework OpenGL"],
)

cc_library(
    name = "tcm_common",
    srcs = [
        "demo.c",
        "dragon.c",
        "dragon.h",
        "shaders.c",
        "triangle.c",
        "triangle.h",
    ],
    hdrs = [
        "demo.h",
        "gl.h",
        "shaders.h",
    ],
    copts = COPTS,
    deps = [
        "@glfw3",
    ] + select({
        "@bazel_tools//src/conditions:darwin": [":opengl_framework"],
        "//conditions:default": ["@glew"],
    }),
)

cc_binary(
    name = "tcm_release",
    srcs = [
        "main_release.c",
        ":packed_shaders",
    ],
    copts = COPTS,
    deps = [":tcm_common"],
)

cc_binary(
    name = "tcm_dev",
    srcs = [
        "loader.cpp",
        "loader.hpp",
        "log.cpp",
        "log.hpp",
        "main_dev.cpp",
        "shader.cpp",
        "shader.hpp",
    ],
    copts = CXXOPTS,
    deps = [":tcm_common"],
)

py_binary(
    name = "pack_shaders",
    srcs = ["pack_shaders.py"],
    # PY3 is default, but this suppresses the warning about Python 3 if the
    # build rule fails.
    python_version = "PY3",
)

genrule(
    name = "packed_shaders",
    srcs = glob([
        "shader/*.vert",
        "shader/*.frag",
    ]),
    outs = [
        "packed_shaders.h",
        "packed_shaders.c",
    ],
    cmd = "./$(location :pack_shaders) " +
          "--out-c=$(location packed_shaders.c) " +
          "--out-h=$(location packed_shaders.h) " +
          "$(SRCS)",
    tools = [":pack_shaders"],
)
